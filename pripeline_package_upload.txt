pipeline {
    agent {
        node {
            label 'master'
        }
    }
    options {
        disableConcurrentBuilds()
    }

    stages {

        stage('download ops-cli & migclient tools'){
            steps{
                dir('/data/package-upload'){
                    script {
                        sh "rm -rf ./*"
                    withAWS(credentials: 'ichs-aws') {
                        s3Download bucket: 'iics-build-artifacts', file: 'ops-cli.zip', force: true, path: "dev/${env.Branch}/microservices/${env.BuildNumber}/ops-cli/ops-cli.zip"
                        s3Download bucket: 'iics-build-artifacts', file: 'ICS_BUILD_NUMBER', force: true, path: "dev/${env.Branch}/microservices/${env.BuildNumber}/ICS_BUILD_NUMBER/ICS_BUILD_NUMBER"
                        // sh'''
                        //     MVERSION=`cat ICS_BUILD_NUMBER`
                        // '''
                        env.MarconiVersion = readFile('ICS_BUILD_NUMBER')
                        print env.MarconiVersion
                        s3Download bucket: 'iics-build-artifacts', file: 'ICSOtherPackages/', force: true, path: "dev/${env.Branch}/ics/${env.MarconiVersion}/ICSOtherPackages/"
                        s3Download bucket: 'iics-build-artifacts', file: 'ICSAgentPackages/', force: true, path: "dev/${env.Branch}/ics/${env.MarconiVersion}/ICSAgentPackages/"
                        sh'''
                            mv ICSOtherPackages/dev/${Branch}/ics/${MarconiVersion}/ICSOtherPackages/* .
                            mv ICSAgentPackages/dev/${Branch}/ics/${MarconiVersion}/ICSAgentPackages/* .
                            rm -rf ICSOtherPackages ICSAgentPackages
                            ls -ltr
                        '''
                    }
                    }
                    
                }
            }
        }
        stage('upack opscli & migclient'){
            steps{
                dir('/data/package-upload'){
                    sh'''
                        mkdir ops-cli mig-client
                        unzip ops-cli.zip -d ops-cli
                        unzip package-mig-client.27.0.0.8.zip -d mig-client
                        ls -ltr
                        chmod +x ops-cli/ops-cli.sh
                        chmod +x mig-client/cli.sh
                        echo "wait"
                    '''
                }
            }
        }

        stage('prepare config file'){
            steps{
                dir('/data/package-upload'){
                    sh'''
                        echo "idsMaPodUrl=${idsMaPodUrl}" > config
                        echo "u=${userId}" >> config
                        echo "p=${password}" >> config
                        echo "pms=${pms}" >> config
                        echo "podName=${podName}" >> config
                        echo "podUrl=${podUrl}" >> config
                    '''
                }
            }
        }

        stage('upload core packages'){
            steps{
                dir('/data/package-upload'){
                    sh '''
                        packages=`ls linux64/*.zip | awk -F '.' '{ print $1 }' | cut -f2 -d"-"`
                        echo "List of packages that are going to be uploaded"
                        echo $packages
                        cp config ./ops-cli/
                        cd ops-cli
                        echo "==========================="
                        for i in $packages;do
                            PKGNAME=$i
                            PKGVERSION=`ls ../linux64/*.zip | grep ${PKGNAME}| awk -F '/' '{print $3}'| awk -F '.' '{ print $2}'`
                            ./ops-cli.sh package-manager uploadAndRegisterPackage -lin64 ../linux64/package-$PKGNAME.$PKGVERSION.zip -win64 ../win64/package-$PKGNAME.$PKGVERSION.zip -skipIfExists
                            echo "{\\"packages\\": [{\\"name\\": \\"${PKGNAME}\\",\\"version\\": \\"${PKGVERSION}\\"}]}" >artifactInput_temp.json
                            cat artifactInput_temp.json
                            ./ops-cli.sh package-manager deployArtifacts -ai artifactInput_temp.json
                        done
                        
                    '''
                }
            }
        }
        stage('upload appspec yamls'){
            steps{
                dir('/data/package-upload'){
                    sh '''
                        echo "List of appspec that are going to be uploaded"
                        echo "==========================="
                        cd mig-client
                        for i in linux64 win64;do
                            for j in `ls ../${i}/*.yaml`;do
                                ./cli.sh application-yaml-upload -st no -bu ${idsMaPodUrl}/ma/ -maUrl ${idsMaPodUrl}/ma/ -u ${userId} -p ${password} -flsaas ${podUrl}/saas -f "../${i}/${j}" -pn ${podName} -d
                            done
                        done
                    '''
                }
            }
        }
    }
   
}
  