pipeline {
    agent {
        node {
            label 'TMS33RH64001'
        }
    }
    options {
        disableConcurrentBuilds()
    }
     parameters {
    choice(name:'Branch',choices:'Florence_ML\nFlorence_Release\nFlorence_DevPatch\nFlorence_Patch\nFlorence_R31Preview\nFlorence_Ebf',description:'Branch to choose')
    string(name: 'BuildNumber', defaultValue: "3656", description: "Build number to use.")
    string(name: 'ICSBUILDNUMBER', defaultValue: "MarconiBuild.Linux64.branch-Florence_ML.rel-33.b2578.tar.gz", description: "ICS BUILD NUMBER")
	string(name: 'idsMaPodUrl', defaultValue: "https://qa-ma.ml.infaqa.com", description: "Provide IDS MA URL")
    string(name: 'podUrl', defaultValue: "https://qa-pod1.ml.infaqa.com", description: "Provide POD URL")
    string(name: 'pmsUrl', defaultValue: "https://qa-common.ml.infaqa.com/package-manager/", description: "Provide PDM URL")
    string(name: 'podName', defaultValue: "pod1", description: "Provide POD Name")
    string(name: 'userId', defaultValue: "admin", description: "Provide USER ID")
	password(name: 'password', defaultValue: "Infa@12345", description: "Provide POD Name")
  }
  
    stages {

        stage('download ops-cli & migclient tools and unpack them'){
            environment {
                         MarconiVersion ="hello"
                            }
            
            steps{
                dir('/home/jenkins/workspace/s3FileDownload'){
                    script {
					
                        sh'''  rm -rf ./*						
						
						mkdir -p packagedownload
                        cd packagedownload 				
                        
						
						wget -r -nH --cut-dirs=3 --no-parent --reject="index.html*" ftp://saasbuild2/ICSAgentPackages/${Branch}/${ICSBUILDNUMBER}/linux64/

                        wget -r -nH --cut-dirs=3 --no-parent --reject="index.html*" ftp://saasbuild2/ICSAgentPackages/${Branch}/${ICSBUILDNUMBER}/win64/ 

                        cd .. 						

                        mkdir -p yamlmigclient
                   
        				cd yamlmigclient
						
						wget -r -nH --cut-dirs=4 --no-parent --reject="index.html*" ftp://saasbuild2/ICSOtherPackages/${Branch}/${ICSBUILDNUMBER}/package-mig-client.27.0.0.8.zip
						 
                        unzip package-mig-client.27.0.0.8.zip   

                        chmod +x cli.sh						

                        cd ..
						
						mkdir -p packagemigClient
						
						cd packagemigClient
						
						wget -r -nH --cut-dirs=12 --no-parent --reject="index.html*" http://iicsmvn:9000/nexus/content/repositories/${Branch}/com/informatica/cloud/utilities/ops-cli/ops-cli/1.0.0-ML.87/ops-cli-1.0.0-ML.87.zip
                        
						unzip ops-cli-1.0.0-ML.87.zip                        						

						'''
                      
                    }
                    
                }
            }
        }

		stage('prepare config file'){
            steps{
                dir('/home/jenkins/workspace/s3FileDownload/packagemigClient'){
                    sh'''
                        echo "idsMaPodUrl=${idsMaPodUrl}" > config
                        echo "u=${userId}" >> config
                        echo "p=${password}" >> config
                        echo "pms=${pmsUrl}" >> config
                        echo "podName=${podName}" >> config
                        echo "podUrl=${podUrl}" >> config
                        bash
                        echo $JAVA_HOME
                    '''
                }
            }
        }
			
        stage('upload appspec yamls for linux'){
            steps{
                dir('/home/jenkins/workspace/s3FileDownload/packagedownload'){
                    sh '''
                        echo "List of appspec that are going to be uploaded"
                        echo "==========================="						                        						
                        for i in linux64/*.yaml ;do  
                          echo ${i}                        
						  cd ../yamlmigclient
                          ./cli.sh application-yaml-upload -st no -bu ${idsMaPodUrl}/ma/ -maUrl ${idsMaPodUrl}/ma/ -u ${userId} -p ${password} -flsaas ${podUrl}/saas -f "../packagedownload/${i}" -pn ${podName} -d                           
                        done
                    '''
                }
            }
        }
		
		stage('upload appspec yamls for windows'){
            steps{
                dir('/home/jenkins/workspace/s3FileDownload/packagedownload'){
                    sh '''
                        echo "List of appspec that are going to be uploaded"
                        echo "==========================="						                        						
                        for i in win64/*.yaml ;do  
                          echo ${i}                        
						  cd ../yamlmigclient
                         ./cli.sh application-yaml-upload -st no -bu ${idsMaPodUrl}/ma/ -maUrl ${idsMaPodUrl}/ma/ -u ${userId} -p ${password} -flsaas ${podUrl}/saas -f "../packagedownload/${i}" -pn ${podName} -d                           
                        done
                    '''
                }
            }
        }

         stage('upload core packages'){
            steps{
                dir('/home/jenkins/workspace/s3FileDownload/packagedownload'){
                    sh '''
                        packages=`ls linux64/*.zip | awk -F '.' '{ print $1 }' | cut -f2 -d"-"`
                        echo "List of packages that are going to be uploaded"
                        echo $packages  						
                        cd ../packagemigClient
                        echo "==========================="
                        for i in $packages;do
                            PKGNAME=$i
                            PKGVERSION=`ls ../packagedownload/linux64/*.zip | grep ${PKGNAME}| awk -F '/' '{print $4}'| awk -F '.' '{ print $2}'`
							echo $PKGVERSION
                            ./ops-cli.sh package-manager uploadAndRegisterPackage -lin64 ../packagedownload/linux64/package-$PKGNAME.$PKGVERSION.zip -win64 ../packagedownload/win64/package-$PKGNAME.$PKGVERSION.zip -skipIfExists
                            echo "{\\"packages\\": [{\\"name\\": \\"${PKGNAME}\\",\\"version\\": \\"${PKGVERSION}\\"}]}" >artifactInput_temp.json
                            cat artifactInput_temp.json
                            ./ops-cli.sh package-manager deployArtifacts -ai artifactInput_temp.json
                        done
                        						
                    '''
                }
            }
        }  
        
    }	
        
    }
   
